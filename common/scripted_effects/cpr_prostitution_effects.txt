cpr_start_or_stop_working_as_prostitute_effect = {
	if = {
		limit = {
			carn_is_working_as_prostitute_trigger = yes
			OR = {
				carn_can_be_prostitute_trigger = no
				cpr_can_work_as_prostitute_trigger = no
			}
		}

		# Character can no longer work as prostitute
		cpr_debug_log_effect = { MSG = cpr_debug_msg_can_no_longer_work_as_prostitute }
		cpr_stop_working_as_prostitute_notify_effect = yes

		# Remove decision cooldown flag
		remove_character_flag = cpr_decision_cooldown
	}
	else_if = {
		limit = {
			is_ai = yes
			NOT = { has_trait = slave }
			trigger_if = {
				limit = { $FORCE$ = no }
				is_playable_character = no
				NOT = { has_character_flag = cpr_decision_cooldown }
			}
			carn_can_be_prostitute_trigger = yes
			cpr_can_work_as_prostitute_trigger = yes
		}

		# Character decides if they should start or stop working as prostitute
		if = {
			limit = { carn_is_working_as_prostitute_trigger = no }
			random = {
				chance = 0
				modifier = {
					add = cpr_start_working_as_prostitute_ai_will_do_value
				}
				cpr_debug_log_effect = { MSG = cpr_debug_msg_decided_to_start_working_as_prostitute }
				cpr_start_working_as_prostitute_notify_effect = yes
			}
		}
		else = {
			random = {
				chance = 0
				modifier = {
					add = cpr_stop_working_as_prostitute_ai_will_do_value
				}
				cpr_debug_log_effect = { MSG = cpr_debug_msg_decided_to_stop_working_as_prostitute }
				cpr_stop_working_as_prostitute_notify_effect = yes
			}
		}

		# Add decision cooldown flag
		add_character_flag = {
			flag = cpr_decision_cooldown
			years = 5
		}
	}
}

cpr_start_working_as_prostitute_notify_effect = {
	save_temporary_scope_as = prostitute
	cpr_get_message_recipient_effect = yes
	scope:message_recipient = {
		send_interface_message = {
			type = event_generic_neutral
			title = msg_carn_started_working_as_prostitute
			right_icon = scope:prostitute
			scope:prostitute = {
				carn_start_working_as_prostitute_effect = yes
			}
		}
	}
}

cpr_stop_working_as_prostitute_notify_effect = {
	save_temporary_scope_as = prostitute
	cpr_get_message_recipient_effect = yes
	scope:message_recipient = {
		send_interface_message = {
			type = event_generic_neutral
			title = msg_carn_stopped_working_as_prostitute
			right_icon = scope:prostitute
			scope:prostitute = {
				carn_stop_working_as_prostitute_effect = yes
			}
		}
	}
}

cpr_get_message_recipient_effect = {
	if = {
		limit = {
			any_relation = {
				type = slave_owner
				exists = this
			}
		}
		random_relation = {
			type = slave_owner
			save_temporary_scope_as = message_recipient
		}
	}
	else_if = {
		limit = { is_courtier = yes }
		liege = {
			save_temporary_scope_as = message_recipient
		}
	}
	else = {
		save_temporary_scope_as = message_recipient
	}
}