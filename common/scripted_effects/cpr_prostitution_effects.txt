# The scoped character stops working as prostitute if they are not allowed to do it.
cpr_potentially_stop_working_as_prostitute_effect = {
	if = {
		limit = {
			OR = {
				carn_can_be_prostitute_trigger = no
				cpr_can_work_as_prostitute_trigger = no
			}
		}

		cpr_debug_log_effect = { MSG = cpr_debug_msg_can_no_longer_work_as_prostitute }
		cpr_stop_working_as_prostitute_notify_effect = yes

		remove_character_flag = cpr_decision_cooldown
		remove_character_flag = cpr_work_as_prostitute_decision
	}
}

# The scoped AI character decides if they should start or stop working as prostitute
# if they are allowed to do it, based on cpr_work_as_prostitute_ai_willingness_value
cpr_start_or_stop_working_as_prostitute_effect = {
	if = {
		limit = {
			is_ai = yes
			cpr_is_slave_trigger = no
			NOT = { has_character_flag = cpr_decision_cooldown }
			carn_can_be_prostitute_trigger = yes
			cpr_can_work_as_prostitute_trigger = yes
		}

		save_scope_value_as = {
			name = work_as_prostitute_ai_willingness
			value = cpr_work_as_prostitute_ai_willingness_value
		}

		if = {
			limit = {
				carn_is_working_as_prostitute_trigger = no
				scope:work_as_prostitute_ai_willingness > 0
			}
			cpr_debug_log_1_effect = {
				MSG = cpr_debug_msg_decided_to_start_working_as_prostitute
				NAME1 = work_as_prostitute_ai_willingness TYPE1 = flag:value
			}
			cpr_start_working_as_prostitute_notify_effect = yes
		}
		else_if = {
			limit = {
				carn_is_working_as_prostitute_trigger = yes
				scope:work_as_prostitute_ai_willingness <= 0
			}
			cpr_debug_log_1_effect = {
				MSG = cpr_debug_msg_decided_to_stop_working_as_prostitute
				NAME1 = work_as_prostitute_ai_willingness TYPE1 = flag:value
			}
			cpr_stop_working_as_prostitute_notify_effect = yes
		}

		add_character_flag = {
			flag = cpr_decision_cooldown
			years = 5
		}
	}
}

cpr_start_working_as_prostitute_notify_effect = {
	save_temporary_scope_as = prostitute
	cpr_get_message_recipient_effect = yes
	scope:message_recipient = {
		send_interface_message = {
			type = event_generic_neutral
			title = msg_carn_started_working_as_prostitute
			right_icon = scope:prostitute
			scope:prostitute = {
				carn_start_working_as_prostitute_effect = yes
			}
		}
	}
}

cpr_stop_working_as_prostitute_notify_effect = {
	save_temporary_scope_as = prostitute
	cpr_get_message_recipient_effect = yes
	scope:message_recipient = {
		send_interface_message = {
			type = event_generic_neutral
			title = msg_carn_stopped_working_as_prostitute
			right_icon = scope:prostitute
			scope:prostitute = {
				carn_stop_working_as_prostitute_effect = yes
			}
		}
	}
}

cpr_get_message_recipient_effect = {
	if = {
		limit = { cpr_is_slave_trigger = yes }
		random_relation = {
			type = slave_owner
			save_temporary_scope_as = message_recipient
		}
	}
	else_if = {
		limit = { is_hostage = yes }
		warden = { save_temporary_scope_as = message_recipient }
	}
	else_if = {
		limit = { is_foreign_court_or_pool_guest = yes }
		host = { save_temporary_scope_as = message_recipient }
	}
	else_if = {
		limit = { is_courtier = yes }
		liege = { save_temporary_scope_as = message_recipient }
	}
	else = {
		save_temporary_scope_as = message_recipient
	}
}