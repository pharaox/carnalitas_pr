# The scoped character stops working as prostitute if they are not allowed to do it.
cpr_potentially_stop_working_as_prostitute_effect = {
	if = {
		limit = {
			OR = {
				carn_can_be_prostitute_trigger = no
				cpr_can_work_as_prostitute_trigger = no
			}
		}

		cpr_debug_log_effect = { MSG = cpr_debug_msg_can_no_longer_work_as_prostitute }
		cpr_stop_working_as_prostitute_notify_effect = yes

		remove_character_flag = cpr_decision_cooldown
		remove_character_flag = cpr_work_as_prostitute_decision
		remove_variable = cpr_forced_by_owner
	}
}

# The scoped AI character decides if they should start or stop working as prostitute
# if they are allowed to do it, based on cpr_work_as_prostitute_ai_willingness_value
cpr_start_or_stop_working_as_prostitute_effect = {
	if = {
		limit = {
			is_ai = yes
			cpr_is_slave_trigger = no
			NOT = { has_character_flag = cpr_decision_cooldown }
			carn_can_be_prostitute_trigger = yes
			cpr_can_work_as_prostitute_trigger = yes
		}

		save_scope_value_as = {
			name = work_as_prostitute_ai_willingness
			value = cpr_work_as_prostitute_ai_willingness_value
		}

		if = {
			limit = {
				carn_is_working_as_prostitute_trigger = no
				scope:work_as_prostitute_ai_willingness > 0
			}
			cpr_debug_log_1_effect = {
				MSG = cpr_debug_msg_decided_to_start_working_as_prostitute
				NAME1 = work_as_prostitute_ai_willingness TYPE1 = flag:value
			}
			cpr_start_working_as_prostitute_notify_effect = yes
		}
		else_if = {
			limit = {
				carn_is_working_as_prostitute_trigger = yes
				scope:work_as_prostitute_ai_willingness <= 0
			}
			cpr_debug_log_1_effect = {
				MSG = cpr_debug_msg_decided_to_stop_working_as_prostitute
				NAME1 = work_as_prostitute_ai_willingness TYPE1 = flag:value
			}
			cpr_stop_working_as_prostitute_notify_effect = yes
		}

		add_character_flag = {
			flag = cpr_decision_cooldown
			years = 5
		}
	}
}

cpr_start_working_as_prostitute_notify_effect = {
	save_temporary_scope_as = prostitute
	cpr_get_message_recipient_effect = yes
	scope:message_recipient = {
		send_interface_message = {
			title = msg_carn_started_working_as_prostitute
			right_icon = scope:prostitute
			scope:prostitute = {
				carn_start_working_as_prostitute_effect = yes
			}
		}
	}
}

cpr_stop_working_as_prostitute_notify_effect = {
	save_temporary_scope_as = prostitute
	cpr_get_message_recipient_effect = yes
	scope:message_recipient = {
		send_interface_message = {
			title = msg_carn_stopped_working_as_prostitute
			right_icon = scope:prostitute
			scope:prostitute = {
				carn_stop_working_as_prostitute_effect = yes
			}
		}
	}
}

cpr_get_message_recipient_effect = {
	if = {
		limit = { cpr_is_slave_trigger = yes }
		random_relation = {
			type = slave_owner
			save_temporary_scope_as = message_recipient
		}
	}
	else_if = {
		limit = { is_hostage = yes }
		warden = { save_temporary_scope_as = message_recipient }
	}
	else_if = {
		limit = { is_foreign_court_or_pool_guest = yes }
		host = { save_temporary_scope_as = message_recipient }
	}
	else_if = {
		limit = { is_courtier = yes }
		liege = { save_temporary_scope_as = message_recipient }
	}
	else = {
		save_temporary_scope_as = message_recipient
	}
}

# Upgrade lifestyle_prostitute trait with the given XP amount
# Replaces carn_upgrade_lifestyle_prostitute_effect
cpr_upgrade_lifestyle_prostitute_effect = {
	if = {
		limit = {
			NOT = { has_trait = lifestyle_prostitute }
		}
		add_trait = lifestyle_prostitute
	}
	add_trait_xp = {
		trait = lifestyle_prostitute
		value = $XP$
	}
	hidden_effect = {
		if = {
			limit = { carn_is_working_as_prostitute_trigger = yes }
			carn_update_working_as_prostitute_modifier_effect = yes
		}
	}
}

# Forces $SLAVE$ to start working as prostitute, also incurs opinion, piety, and stress effects.
# Sends interface messages.
cpr_force_start_prostitution_interaction_effect = {
	send_interface_message = {
		title = msg_carn_started_working_as_prostitute
		right_icon = $SLAVE$
		cpr_force_start_prostitution_effect = { SLAVE = $SLAVE$ }
	}
}

# Forces $SLAVE$ to stop working as prostitute, also incurs piety and stress effects.
# Sends interface messages.
cpr_force_stop_prostitution_interaction_effect = {
	send_interface_message = {
		title = msg_carn_stopped_working_as_prostitute
		right_icon = $SLAVE$
		cpr_force_stop_prostitution_effect = { SLAVE = $SLAVE$ }
	}
}

# Forces $SLAVE$ to start working as prostitute, also incurs opinion, piety, and stress effects.
cpr_force_start_prostitution_effect = {
	save_temporary_scope_as = owner

	$SLAVE$ = {
		scope:recipient = {
			set_variable = {
				name = cpr_forced_by_owner
				value = scope:owner
			}
		}

		# Lose opinion of owner if not already a prostitute
		if = {
			limit = {
				carn_is_prostitute_trigger = no
				NOT = {
					carn_has_fetish_trigger = { FETISH = submission }
				}
			}
			add_opinion = {
				target = scope:owner
				modifier = carn_forced_me_into_prostitution_opinion
			}
		}

		# Start working as prostitute
		cpr_debug_log_effect = { MSG = cpr_debug_msg_forced_to_start_working_as_prostitute }
		carn_start_working_as_prostitute_effect = yes
	}

	# Lose piety level if prostitution is illegal, or just piety if it's not accepted
	if = {
		limit = { carn_legal_prostitution_trigger = no }
		add_piety_level = -1
		add_piety = massive_piety_loss
	}
	else_if = {
		limit = { carn_accepts_prostitution_trigger = no }
		add_piety = major_piety_loss
	}

	# Stress impact
	stress_impact = {
		generous = minor_stress_impact_gain
		compassionate = miniscule_stress_impact_gain
		greedy = minor_stress_impact_loss
		sadistic = miniscule_stress_impact_loss
		callous = miniscule_stress_impact_loss
	}
	if = {
		limit = { carn_accepts_prostitution_trigger = no }
		stress_impact = {
			zealous = minor_stress_impact_gain
			cynical = minor_stress_impact_loss
		}
	}

	# Stress impact from family, dynasty, and relations
	cpr_family_or_dynasty_stress_impact_effect = {
		CHARACTER = $SLAVE$
		TYPE = gain
		NOT_TYPE = loss
	}
	cpr_friend_or_lover_stress_impact_effect = {
		CHARACTER = $SLAVE$
		TYPE = gain
		NOT_TYPE = loss
	}
	cpr_rival_stress_impact_effect = {
		CHARACTER = $SLAVE$
		TYPE = loss
		NOT_TYPE = gain
	}
}

# Forces $SLAVE$ to stop working as prostitute, also incurs piety and stress effects.
cpr_force_stop_prostitution_effect = {
	save_temporary_scope_as = owner

	$SLAVE$ = {
		# Stop working as prostitute
		cpr_debug_log_effect = { MSG = cpr_debug_msg_forced_to_stop_working_as_prostitute }
		carn_stop_working_as_prostitute_effect = yes

		remove_variable = cpr_forced_by_owner
	}

	# Lose piety level if prostitution is illegal, or just piety if it's not accepted
	if = {
		limit = { carn_legal_prostitution_trigger = no }
		add_piety = medium_piety_gain
	}
	else_if = {
		limit = { carn_accepts_prostitution_trigger = no }
		add_piety = minor_piety_gain
	}

	# Stress impact
	stress_impact = {
		greedy = minor_stress_impact_gain
		sadistic = miniscule_stress_impact_gain
		callous = miniscule_stress_impact_gain
		generous = minor_stress_impact_loss
		compassionate = miniscule_stress_impact_loss
	}
	if = {
		limit = { carn_accepts_prostitution_trigger = no }
		stress_impact = {
			cynical = minor_stress_impact_gain
			zealous = minor_stress_impact_loss
		}
	}

	# Stress impact from family, dynasty, and relations
	cpr_family_or_dynasty_stress_impact_effect = {
		CHARACTER = $SLAVE$
		TYPE = loss
		NOT_TYPE = gain
	}
	cpr_friend_or_lover_stress_impact_effect = {
		CHARACTER = $SLAVE$
		TYPE = loss
		NOT_TYPE = gain
	}
	cpr_rival_stress_impact_effect = {
		CHARACTER = $SLAVE$
		TYPE = gain
		NOT_TYPE = loss
	}
}

cpr_family_or_dynasty_stress_impact_effect = {
	if = {
		limit = { is_parent_of = $CHARACTER$ }
		stress_impact = {
			base = major_stress_impact_$TYPE$
			compassionate = medium_stress_impact_$TYPE$
			sadistic = medium_stress_impact_$NOT_TYPE$
			callous = medium_stress_impact_$NOT_TYPE$
		}
	}
	else_if = {
		limit = {
			OR = {
				is_close_family_of = $CHARACTER$
				is_spouse_of = $CHARACTER$
			}
		}
		stress_impact = {
			base = medium_stress_impact_$TYPE$
			compassionate = minor_stress_impact_$TYPE$
			sadistic = minor_stress_impact_$NOT_TYPE$
			callous = minor_stress_impact_$NOT_TYPE$
		}
	}
	else_if = {
		limit = { is_extended_family_of = $CHARACTER$ }
		stress_impact = {
			base = minor_stress_impact_$TYPE$
			compassionate = miniscule_stress_impact_$TYPE$
			sadistic = miniscule_stress_impact_$NOT_TYPE$
			callous = miniscule_stress_impact_$NOT_TYPE$
		}
	}
}

cpr_friend_or_lover_stress_impact_effect = {
	if = {
		limit = {
			OR = {
				has_relation_best_friend = $CHARACTER$
				has_relation_soulmate = $CHARACTER$
			}
		}
		stress_impact = {
			base = major_stress_impact_$TYPE$
			compassionate = medium_stress_impact_$TYPE$
			sadistic = medium_stress_impact_$NOT_TYPE$
			callous = medium_stress_impact_$NOT_TYPE$
		}
	}
	else_if = {
		limit = {
			OR = {
				has_relation_friend = $CHARACTER$
				has_relation_lover = $CHARACTER$
			}
		}
		stress_impact = {
			base = medium_stress_impact_$TYPE$
			compassionate = minor_stress_impact_$TYPE$
			sadistic = minor_stress_impact_$NOT_TYPE$
			callous = minor_stress_impact_$NOT_TYPE$
		}
	}
}

cpr_rival_stress_impact_effect = {
	if = {
		limit = { has_relation_nemesis = $CHARACTER$ }
		stress_impact = {
			base = major_stress_impact_$TYPE$
			vengeful = medium_stress_impact_$TYPE$
			forgiving = medium_stress_impact_$NOT_TYPE$
		}
	}
	else_if = {
		limit = { has_relation_rival = $CHARACTER$ }
		stress_impact = {
			base = medium_stress_impact_$TYPE$
			vengeful = minor_stress_impact_$TYPE$
			forgiving = minor_stress_impact_$NOT_TYPE$
		}
	}
}