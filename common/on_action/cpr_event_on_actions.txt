# Characters getting married
# root = Major partner of the marriage
# scope:spouse = Minor partner of the marriage
on_marriage = {
	on_actions = { cpr_on_marriage_relay }
}

cpr_on_marriage_relay = {
	effect = {
		trigger_event = { on_action = cpr_on_marriage }
		scope:spouse = {
			trigger_event = { on_action = cpr_on_marriage }
		}
	}
}

cpr_on_marriage = {
	trigger = {
		carn_is_working_as_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:on_marriage }
		cpr_potentially_stop_working_as_prostitute_effect = yes
	}
}

# Character becomes another's concubine
# root = the concubinist
# scope:concubine = the concubine
on_concubinage = {
	on_actions = { cpr_on_concubinage_relay }
}

cpr_on_concubinage_relay = {
	effect = {
		scope:concubine = {
			trigger_event = { on_action = cpr_on_concubinage }
		}
	}
}

cpr_on_concubinage = {
	trigger = {
		carn_is_working_as_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:on_concubinage }
		cpr_potentially_stop_working_as_prostitute_effect = yes
	}
}

# Fires when a character joins a court. Not fired for just generated characters
# Root is the character
# scope:new_employer is their new employer
# scope:old_employer is their old employer (if they had one; otherwise unset)
on_join_court = {
	on_actions = { cpr_on_join_court }
}

cpr_on_join_court = {
	trigger = {
		carn_is_working_as_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:on_join_court }
		cpr_potentially_stop_working_as_prostitute_effect = yes
	}
}

# Code on-action: character being imprisoned in root scope
# imprisoning character set as scope:imprisoner
on_imprison = {
	on_actions = { cpr_on_imprison }
}

cpr_on_imprison = {
	trigger = {
		carn_is_working_as_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:on_imprison }
		cpr_potentially_stop_working_as_prostitute_effect = yes
	}
}

# A title is transferred to a new character
# root = the new holder
# scope:title = the title that changes hands
# scope:previous_holder = previous holder. Might be dead
on_title_gain = {
	on_actions = { cpr_on_title_gain }
}

cpr_on_title_gain = {
	trigger = {
		carn_is_working_as_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:on_title_gain }
		cpr_potentially_stop_working_as_prostitute_effect = yes
	}
}

on_remove_relation_slave = {
	on_actions = { cpr_on_remove_relation_slave_relay }
}

cpr_on_remove_relation_slave_relay = {
	effect = {
		scope:target = {
			trigger_event = { on_action = cpr_on_slave_owner_removed }
		}
	}
}

on_remove_relation_slave_owner = {
	on_actions = { cpr_on_slave_owner_removed }
}

cpr_on_slave_owner_removed = {
	trigger = {
		carn_is_working_as_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:on_slave_owner_removed }
		cpr_potentially_stop_working_as_prostitute_effect = yes
	}
}

# TODO
# on_hostage_taken
# on_guest_arrived_from_pool
# on_character_faith_change
# on_character_culture_change
# on_birthday
# on_contract_disease

# Called from code once a year for all characters, at a random point that year (individually for each character)
# Root is the character
random_yearly_everyone_pulse = {
	on_actions = { cpr_random_yearly_everyone_pulse }
}

cpr_random_yearly_everyone_pulse = {
	trigger = {
		carn_is_prostitute_trigger = yes
	}
	effect = {
		save_scope_value_as = { name = cpr_event value = flag:yearly_pulse }

		# Stop working as prostitute if they can no longer do it
		if = {
			limit = { carn_is_working_as_prostitute_trigger = yes }
			cpr_potentially_stop_working_as_prostitute_effect = yes
		}

		# Decide if they should start or stop working as prostitute if they are not a ruler
		# Rulers use the Carnalitas decisions instead
		if = {
			limit = { is_ruler = no }
			cpr_start_or_stop_working_as_prostitute_effect = yes
		}

		# Trigger Carnalitas events
		trigger_event = { on_action = carn_prostitution_yearly_maintenance_pulse }
	}
}
